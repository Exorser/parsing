import asyncio
import logging
import requests
from typing import List, Optional, Tuple
from django.core.management.base import BaseCommand
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from app.base_parser import WildberriesParser, OzonParser
from concurrent.futures import ThreadPoolExecutor
from io import BytesIO
import aiohttp
from datetime import datetime
import sys
from logging.handlers import RotatingFileHandler
from .user_service import UserService

class IgnoreUnicodeErrorsHandler(logging.StreamHandler):
    def emit(self, record):
        try:
            super().emit(record)
        except UnicodeEncodeError:
            pass

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        'telegram_bot.log',
        maxBytes=10*1024*1024,  # 10 MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.DEBUG)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
    error_handler = logging.FileHandler('telegram_errors.log', encoding='utf-8')
    error_handler.setFormatter(formatter)
    error_handler.setLevel(logging.ERROR)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)
    root_logger.addHandler(error_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è specific –ª–æ–≥–≥–µ—Ä–æ–≤
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    
    return root_logger

setup_logging()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.addHandler(IgnoreUnicodeErrorsHandler())
logger.setLevel(logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH_QUERY, SEARCH_PLATFORM, SEARCH_LIMIT = range(3)

class MultiPlatformBot:
    def __init__(self, token: str):
        self.token = token
        self.parsers = {
            'WB': WildberriesParser(),
            'OZ': OzonParser()
        }
        self.current_parser = self.parsers['WB']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Wildberries
        self.executor = ThreadPoolExecutor(max_workers=5)
        self.session = None
        self.current_search_task = None  # –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞
        self.search_lock = asyncio.Lock()
        self.user_service = UserService()
    
    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
            
        if hasattr(self.parsers['OZ'], 'init_session_async'):
            await self.parsers['OZ'].init_session_async()
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫
            await self.cancel_current_search()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
            for parser in self.parsers.values():
                if hasattr(parser, 'close_session'):
                    await parser.close_session()
                elif hasattr(parser, 'session'):
                    parser.session.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            if self.session:
                await self.session.close()
                self.session = None
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º executor
            self.executor.shutdown(wait=False)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
            self.session = None
            async with self.search_lock:
                self.current_search_task = None

    def _get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("üõí –°–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")],
            [KeyboardButton("üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton("üéØ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("üíé –ê–∫—Ü–∏–∏")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")

    def _get_platform_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        keyboard = [
            [KeyboardButton("Wildberries üõçÔ∏è"), KeyboardButton("Ozon üü†")],
            [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def _get_search_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        keyboard = [
            [KeyboardButton("5 —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("10 —Ç–æ–≤–∞—Ä–æ–≤")],
            [KeyboardButton("15 —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("20 —Ç–æ–≤–∞—Ä–æ–≤")],
            [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ...")

    def _get_cancel_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞"""
        keyboard = [
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")

    def _get_quick_search_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        keyboard = [
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
    
    async def cancel_current_search(self):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
        async with self.search_lock:
            if self.current_search_task and not self.current_search_task.done():
                self.current_search_task.cancel()
                try:
                    await asyncio.wait_for(self.current_search_task, timeout=1.0)
                except (asyncio.CancelledError, asyncio.TimeoutError):
                    logger.info("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞: {e}")
                finally:
                    self.current_search_task = None

    async def cancel_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        context.user_data['search_cancelled'] = True
        await update.message.reply_text(
            "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=self._get_main_keyboard()
        )
        context.user_data['in_search'] = False
        return ConversationHandler.END

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await self.user_service.get_or_create_telegram_user(update)
        if user:
            context.user_data['db_user'] = user  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context
            await self.user_service.update_user_activity(user.user_id)
        context.user_data.setdefault('search_history', [])
        context.user_data.setdefault('preferred_platform', 'WB')
        
        welcome_text = (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MultiPlatform Parser Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.\n\n"
            f"üì¶ <b>–¢–µ–∫—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {self._get_platform_display_name()}\n\n"
            "‚ú® <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é</b> –Ω–∏–∂–µ\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b> –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ <code>/help</code> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n"
            "üí° <b>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞!</b>"
        )
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode="HTML",
            reply_markup=self._get_main_keyboard()
        )

    def _get_platform_display_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if isinstance(self.current_parser, WildberriesParser):
            return "Wildberries üõçÔ∏è"
        elif isinstance(self.current_parser, OzonParser):
            return "Ozon üü†"
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    async def switch_platform(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        await update.message.reply_text(
            "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
            "‚Ä¢ Wildberries üõçÔ∏è - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å\n"
            "‚Ä¢ Ozon üü† - –æ–¥–Ω–∞ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
            parse_mode="HTML",
            reply_markup=self._get_platform_keyboard()
        )

    async def handle_platform_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        text = update.message.text.strip()
        
        if text == "Wildberries üõçÔ∏è":
            self.current_parser = self.parsers['WB']
            context.user_data['preferred_platform'] = 'WB'
            platform_name = "Wildberries üõçÔ∏è"
        elif text == "Ozon üü†":
            self.current_parser = self.parsers['OZ']
            context.user_data['preferred_platform'] = 'OZ'
            platform_name = "Ozon üü†"
        elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=self._get_main_keyboard()
            )
            return
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                reply_markup=self._get_platform_keyboard()
            )
            return
        
        await update.message.reply_text(
            f"‚úÖ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:</b> {platform_name}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–∏—Å–∫–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.",
            parse_mode="HTML",
            reply_markup=self._get_main_keyboard()
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ —Å —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥"""
        help_text = (
            "üìö <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê</b>\n\n"
            
            "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ /search - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ /history - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ /top - —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "‚Ä¢ /platform - —Å–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É\n"
            "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            
            f"üì¶ <b>–¢–µ–∫—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {self._get_platform_display_name()}\n\n"
            
            "üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:</b>\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ üõí –°–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É - –≤—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞\n"
            "‚Ä¢ üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ - –≤–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ üéØ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ üíé –ê–∫—Ü–∏–∏ - —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏\n\n"
            
            "üí° <b>–°–æ–≤–µ—Ç:</b> –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
        )
        
        await update.message.reply_text(
            help_text, 
            parse_mode="HTML",
            reply_markup=self._get_main_keyboard()
        )
    
    async def handle_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        media_type = "—Ñ–∞–π–ª"
        if update.message.photo:
            media_type = "—Ñ–æ—Ç–æ"
        elif update.message.video:
            media_type = "–≤–∏–¥–µ–æ"
        elif update.message.document:
            media_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        elif update.message.location:
            media_type = "–≥–µ–æ–ø–æ–∑–∏—Ü–∏—è"
        elif update.message.poll:
            media_type = "–æ–ø—Ä–æ—Å"
        
        await update.message.reply_text(
            f"‚ùå <b>{media_type.capitalize()} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (/help –¥–ª—è —Å–ø–∏—Å–∫–∞)\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞",
            parse_mode="HTML",
            reply_markup=self._get_main_keyboard()
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
            context.user_data['search_cancelled'] = True
            await update.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=self._get_main_keyboard()
            )
            context.user_data['in_search'] = False
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫" and context.user_data.get('in_quick_search', False):
            context.user_data['quick_search_cancelled'] = True
            await update.message.reply_text(
                "‚ùå –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=self._get_main_keyboard()
            )
            context.user_data['in_quick_search'] = False
            return
        
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await self.cancel_current_search()
            await update.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=self._get_main_keyboard()
            )
            return
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if text in ["Wildberries üõçÔ∏è", "Ozon üü†"]:
            await self.handle_platform_selection(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        if text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤":
            await self.search_command(update, context)
        elif text == "üõí –°–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É":
            await self.switch_platform(update, context)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.stats_command(update, context)
        elif text == "üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞":
            await self.history_command(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help(update, context)
        elif text == "üéØ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤":
            await self.top_products(update, context)
        elif text == "üíé –ê–∫—Ü–∏–∏":
            await self.discount_products(update, context)
        elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=self._get_main_keyboard()
            )
        elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            await self.clear_history(update, context)
        elif text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏":
            await self.history_command(update, context)
        elif text == "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            await self.handle_confirmation(update, context)
        elif text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
            await self.handle_confirmation(update, context)
        elif context.user_data.get('awaiting_confirmation', False):
            await self.handle_confirmation(update, context)
        elif text.startswith("üîç ") and len(text) > 2:
            query = text[2:].strip()
            await self.show_history_products(update, context, query)
        else:
            if context.user_data.get('in_search', False):
                current_state = context.user_data.get('search_state')
                if current_state == SEARCH_QUERY:
                    await self.receive_query(update, context)
                elif current_state == SEARCH_LIMIT:
                    await self.receive_limit(update, context)
            else:
                await self.quick_search(update, context)
    
    async def clear_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        keyboard = [
            [KeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
            [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['awaiting_confirmation'] = True

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        text = update.message.text.strip()  # –í–æ—Ç –∑–¥–µ—Å—å text –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è!
        
        if text == "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
            user = context.user_data.get('db_user')
            if user:
                try:
                    from asgiref.sync import sync_to_async
                    from app.models import UserSearchHistory
                    # –£–î–ê–õ–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
                    await sync_to_async(
                        lambda: UserSearchHistory.objects.filter(user=user).delete()
                    )()
                    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è user_id={user.user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î: {e}")
            
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            context.user_data['search_history'] = []
            context.user_data['awaiting_confirmation'] = False
            
            await update.message.reply_text(
                "‚úÖ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!</b>",
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )
        
        elif text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
            context.user_data['awaiting_confirmation'] = False
            await update.message.reply_text(
                "‚ùå <b>–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )
    
    async def show_history_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str = None):
        """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""
        if query is None:
            text = update.message.text.strip()
            if text.startswith("üîç "):
                query = text[2:].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ query –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
        if query in ["üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏", "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]:
            await self.history_command(update, context)
            return
        
        # –ò—â–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        search_history = context.user_data.get('search_history', [])
        found_history = None
        
        for history_item in search_history:
            if history_item.get('query', '') == query:
                found_history = history_item
                break
        
        if not found_history or 'products' not in found_history:
            await update.message.reply_text(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:</b> <code>{query}</code>",
                parse_mode="HTML",
                reply_markup=self._get_history_keyboard(search_history)
            )
            return
        
        products = found_history['products']
        timestamp = found_history.get('timestamp', '')
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        await update.message.reply_text(
            f"üì¶ <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> <code>{query}</code>\n"
            f"üìä <b>–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> <b>{len(products)}</b>\n"
            f"üïí <b>–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:</b> {timestamp}\n\n"
            f"<i>–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã...</i>",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        await self.send_all_products(update, products)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        keyboard = [[KeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ <b>–ü–æ–∫–∞–∑–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    async def _clean_old_history(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤"""
        if 'search_history' not in context.user_data:
            return
        
        from datetime import datetime, timedelta
        history = context.user_data['search_history']
        twenty_four_hours_ago = datetime.now() - timedelta(hours=24)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        filtered_history = []
        for item in history:
            timestamp_str = item.get('timestamp', '')
            try:
                item_time = datetime.strptime(timestamp_str, "%d.%m.%Y %H:%M")
                if item_time >= twenty_four_hours_ago:
                    filtered_history.append(item)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                filtered_history.append(item)
        
        context.user_data['search_history'] = filtered_history

    async def top_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        categories = {
            "üî• –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω",
            "üëü –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", 
            "üíÑ –ö—Ä–∞—Å–æ—Ç–∞": "–¥—É—Ö–∏",
            "üè† –î–æ–º": "–¥–∏–≤–∞–Ω",
            "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "–∏–≥—Ä–∞",
            "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è": "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
        }
        
        keyboard = []
        for category_name in categories.keys():
            keyboard.append([KeyboardButton(f"{category_name}")])
        
        keyboard.append([KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üéØ <b>–¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def show_top_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
        """–ü–æ–∫–∞–∑ —Ç–æ–ø–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = self._get_query_for_category(category)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        products = await asyncio.to_thread(
            self.current_parser.search_products_with_strategy,
            query,
            limit=5,
            strategy="popular_midrange"
        )
        
        if not products:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=self._get_main_keyboard()
            )
            return
        
        await update.message.reply_text(
            f"üéØ <b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category}\n\n"
            f"üîç –ó–∞–ø—Ä–æ—Å: <code>{query}</code>\n"
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤",
            parse_mode="HTML"
        )
        
        await self.send_all_products(update, products)

    def _get_query_for_category(self, category: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_mapping = {
            "üî• –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω",
            "üëü –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏",
            "üíÑ –ö—Ä–∞—Å–æ—Ç–∞": "–¥—É—Ö–∏",
            "üè† –î–æ–º": "–¥–∏–≤–∞–Ω",
            "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "–∏–≥—Ä–∞",
            "üí∞ –°—É–ø–µ—Ä—Å–∫–∏–¥–∫–∏": "—Å–∫–∏–¥–∫–∞ 70",
            "‚≠ê –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥": "—Ä–µ–π—Ç–∏–Ω–≥ 5",
            "üöÄ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞": "–¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞",
            "üéØ –¢–æ–ø –ø–æ –æ—Ç–∑—ã–≤–∞–º": "–æ—Ç–∑—ã–≤–æ–≤ 1000",
            "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è": self._get_random_category_query()
        }
        
        return category_mapping.get(category, "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")

    def _get_random_category_query(self) -> str:
        """–°–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        import random
        random_queries = [
            "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–¥—É—Ö–∏", "–¥–∏–≤–∞–Ω", "–∏–≥—Ä–∞",
            "–ø–ª–∞—Ç—å–µ", "—á–∞—Å—ã", "–Ω–æ—É—Ç–±—É–∫", "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä", "–∫–æ—Ñ–µ",
            "—á–∞–π", "–∏–≥—Ä—É—à–∫–∞", "–∫–Ω–∏–≥–∞", "—Å—É–º–∫–∞", "–∫–æ—Ñ—Ç–∞"
        ]
        return random.choice(random_queries)

    async def discount_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏"""
        discount_categories = ["üëü –°–æ —Å–∫–∏–¥–∫–æ–π", "üëï –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "üì± –£—Ü–µ–Ω–∫–∞", "üíÑ –ê–∫—Ü–∏—è"]
        
        keyboard = []
        for category in discount_categories:
            keyboard.append([KeyboardButton(f"üíé {category}")])
        keyboard.append([KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üíé <b>–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞"""
        platform_name = self._get_platform_display_name()
        
        await update.message.reply_text(
            f"üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ {platform_name}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]], 
                                        resize_keyboard=True)
        )
        
        context.user_data['in_search'] = True
        context.user_data['search_state'] = SEARCH_QUERY
        return SEARCH_QUERY
    
    def _get_history_keyboard(self, search_history: list):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for history_item in search_history[:5]:
            query = history_item.get('query', '')
            display_query = query[:18] + "..." if len(query) > 21 else query
            keyboard.append([KeyboardButton(f"üîç {display_query}")])
        
        keyboard.append([KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")])
        keyboard.append([KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    async def receive_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        text = update.message.text.strip()
        
        if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=self._get_main_keyboard()
            )
            context.user_data['in_search'] = False
            return ConversationHandler.END
        
        query = text.strip()
        if len(query) < 2:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return SEARCH_QUERY
        
        context.user_data['query'] = query
        context.user_data['search_cancelled'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã

        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        keyboard = [
            [KeyboardButton("5 —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("10 —Ç–æ–≤–∞—Ä–æ–≤")],
            [KeyboardButton("15 —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton("20 —Ç–æ–≤–∞—Ä–æ–≤")],
            [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        reply_markup = self._get_search_keyboard()     

        platform_name = self._get_platform_display_name()
        await update.message.reply_text(
            f"üîç –í—ã –∏—â–µ—Ç–µ –Ω–∞ {platform_name}: <b>{query}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        context.user_data['search_state'] = SEARCH_LIMIT
        return SEARCH_LIMIT

    async def receive_limit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–º–µ–Ω–æ–π"""
        text = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await update.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=self._get_main_keyboard()
            )
            context.user_data['in_search'] = False
            return ConversationHandler.END

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await self.cancel_current_search()
            await update.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=self._get_main_keyboard()
            )
            context.user_data['in_search'] = False
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç
        if text not in ["5 —Ç–æ–≤–∞—Ä–æ–≤", "10 —Ç–æ–≤–∞—Ä–æ–≤", "15 —Ç–æ–≤–∞—Ä–æ–≤", "20 —Ç–æ–≤–∞—Ä–æ–≤"]:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=self._get_search_keyboard()
            )
            return SEARCH_LIMIT
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
        limit_mapping = {
            "5 —Ç–æ–≤–∞—Ä–æ–≤": 5,
            "10 —Ç–æ–≤–∞—Ä–æ–≤": 10, 
            "15 —Ç–æ–≤–∞—Ä–æ–≤": 15,
            "20 —Ç–æ–≤–∞—Ä–æ–≤": 20
        }
        limit = limit_mapping[text]
        
        query = context.user_data.get('query', '')
        platform_name = self._get_platform_display_name()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        cancel_keyboard = self._get_cancel_keyboard()
        
        search_msg = await update.message.reply_text(
            f"üîç <b>–ò—â—É {limit} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ {platform_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...\n"
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['search_message_id'] = search_msg.message_id
        
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            await self.cancel_current_search()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞
            async with self.search_lock:
                self.current_search_task = asyncio.create_task(
                    self._execute_extended_search(update, context, query, limit, search_msg)
                )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞
            await self.current_search_task
            
        except asyncio.CancelledError:
            # –ü–æ–∏—Å–∫ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            try:
                await search_msg.edit_text(
                    "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=self._get_main_keyboard()
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(
                    "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=self._get_main_keyboard()
                )
        except asyncio.TimeoutError:
            try:
                await search_msg.edit_text(
                    "‚è∞ <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞</b>\n\n"
                    "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
            except Exception:
                await update.message.reply_text(
                    "‚è∞ <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞</b>",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: %s", str(e), exc_info=True)
            try:
                await search_msg.edit_text(
                    f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:</b>\n{str(e)[:100]}...",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
            except Exception:
                await update.message.reply_text(
                    f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:</b>\n{str(e)[:100]}...",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
        finally:
            # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ–∏—Å–∫–∞
            context.user_data['in_search'] = False
            async with self.search_lock:
                self.current_search_task = None
        
        return ConversationHandler.END

    async def _execute_extended_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                query: str, limit: int, search_msg):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        platform_name = self._get_platform_display_name()
        
        try:
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–º–µ–Ω—ã
            dots = ["", ".", "..", "..."]
            for i in range(4):
                if self.current_search_task and self.current_search_task.cancelled():
                    raise asyncio.CancelledError()
                    
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try/except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await search_msg.edit_text(
                        f"üîç <b>–ò—â—É {limit} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ {platform_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>{dots[i % 4]}\n\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...\n"
                        "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
                        parse_mode="HTML",
                        reply_markup=self._get_cancel_keyboard()
                    )
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                
                await asyncio.sleep(0.4)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—è–∂–µ–ª–æ–π —Ä–∞–±–æ—Ç—ã
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            raw_products = await asyncio.wait_for(
                loop.run_in_executor(self.executor, self.current_parser.search_products, query, limit),
                timeout=25.0
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            if not raw_products:
                try:
                    await search_msg.edit_text(
                        f"‚ùå <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É</b> <code>{query}</code> <b>–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {platform_name}</b>\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await update.message.reply_text(
                        f"‚ùå <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É</b> <code>{query}</code> <b>–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {platform_name}</b>",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
            saved_count = await self.current_parser.parse_and_save_async(query, limit)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            if saved_count == 0:
                try:
                    await search_msg.edit_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>\n\n"
                        "‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
            from app.models import Product
            
            product_ids = [str(p.get('product_id')) for p in raw_products if p.get('product_id')]
            
            if product_ids:
                products = await loop.run_in_executor(
                    self.executor,
                    lambda: list(Product.objects.filter(
                        product_id__in=product_ids, 
                        platform=self.current_parser.platform
                    ))
                )
            else:
                products = await loop.run_in_executor(
                    self.executor,
                    lambda: list(Product.objects.filter(
                        platform=self.current_parser.platform
                    ).order_by('-id')[:limit])
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            if not products:
                try:
                    await search_msg.edit_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>\n\n"
                        "‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ context
            context.user_data['last_results'] = products
            context.user_data['query'] = query
            
            try:
                await search_msg.edit_text(
                    f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å {platform_name}</b>\n\n"
                    "üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
                    parse_mode="HTML"
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            products_for_sending = []
            for product in products:
                products_for_sending.append({
                    'product_id': str(product.product_id),
                    'name': product.name,
                    'price': float(product.price),
                    'discount_price': float(product.discount_price) if product.discount_price else None,
                    'rating': float(product.rating) if product.rating else 0.0,
                    'reviews_count': product.reviews_count,
                    'product_url': product.product_url,
                    'image_url': product.image_url,
                    'quantity': product.quantity,
                    'is_available': product.is_available,
                    'platform': product.platform
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
            platform_name_display = self._get_platform_display_name()
            await self._save_search_history(update, context, query, products_for_sending, platform_name_display)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
            await self.send_all_products(update, products_for_sending)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                f"üéâ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:",
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )
            
        except asyncio.CancelledError:
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –≤—ã—à–µ
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: %s", str(e), exc_info=True)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω
            if not (self.current_search_task and self.current_search_task.cancelled()):
                try:
                    await search_msg.edit_text(
                        f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:</b>\n{str(e)[:100]}...",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:</b>\n{str(e)[:100]}...",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
            raise

    async def quick_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–º–µ–Ω–æ–π"""
        query = update.message.text.strip()
        
        if query == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await self.cancel_current_search()
            await update.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=self._get_main_keyboard()
            )
            return
        
        if len(query) < 2:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        await self.cancel_current_search()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = self._get_quick_search_keyboard()
        
        platform_name = self._get_platform_display_name()
        
        search_msg = await update.message.reply_text(
            f"üîç <b>–ò—â—É —Ç–æ–≤–∞—Ä—ã –Ω–∞ {platform_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...\n"
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º context
        async with self.search_lock:
            self.current_search_task = asyncio.create_task(
                self._execute_quick_search(update, context, query, search_msg)
            )
        
        try:
            await self.current_search_task
        except asyncio.CancelledError:
            # –ü–æ–∏—Å–∫ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            try:
                await search_msg.edit_text(
                    "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=self._get_main_keyboard()
                )
            except Exception:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=self._get_main_keyboard()
                )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: %s", str(e))
            try:
                await search_msg.edit_text(
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:</b> {str(e)[:100]}...",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
            except Exception:
                await update.message.reply_text(
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:</b> {str(e)[:100]}...",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )

    async def _execute_quick_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, search_msg):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        try:
            platform_name = self._get_platform_display_name()
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–º–µ–Ω—ã
            dots = ["", ".", "..", "..."]
            for i in range(6):
                if self.current_search_task and self.current_search_task.cancelled():
                    raise asyncio.CancelledError()
                    
                try:
                    await search_msg.edit_text(
                        f"üîç <b>–ò—â—É —Ç–æ–≤–∞—Ä—ã –Ω–∞ {platform_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>{dots[i % 4]}\n\n"
                        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...\n"
                        "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç",
                        parse_mode="HTML",
                        reply_markup=self._get_quick_search_keyboard()
                    )
                except Exception:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                    pass
                
                await asyncio.sleep(0.3)
            
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            raw_products = await asyncio.wait_for(
                loop.run_in_executor(self.executor, self.current_parser.search_products, query, 10),
                timeout=30.0
            )
            
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            if not raw_products:
                try:
                    await search_msg.edit_text(
                        f"‚ùå <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É</b> <code>{query}</code> <b>–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {platform_name}</b>\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ùå <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É</b> <code>{query}</code> <b>–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {platform_name}</b>",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
            saved_count = await self.current_parser.parse_and_save_async(query, 10)
            
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            if saved_count == 0:
                try:
                    await search_msg.edit_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>\n\n"
                        "‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
            from app.models import Product
            
            product_ids = [str(p.get('product_id')) for p in raw_products if p.get('product_id')]
            
            if product_ids:
                products = await loop.run_in_executor(
                    self.executor,
                    lambda: list(Product.objects.filter(
                        product_id__in=product_ids, 
                        platform=self.current_parser.platform
                    ))
                )
            else:
                products = await loop.run_in_executor(
                    self.executor,
                    lambda: list(Product.objects.filter(
                        platform=self.current_parser.platform
                    ).order_by('-id')[:10])
                )
            
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            if not products:
                try:
                    await search_msg.edit_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>\n\n"
                        "‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å {platform_name}</b>",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context
            context.user_data['last_results'] = products
            context.user_data['query'] = query
            
            try:
                await search_msg.edit_text(
                    f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ç–æ–≤–∞—Ä–æ–≤ —Å {platform_name}</b>\n\n"
                    "üì¶ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
                    parse_mode="HTML"
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            products_for_sending = []
            for product in products:
                products_for_sending.append({
                    'product_id': str(product.product_id),
                    'name': product.name,
                    'price': float(product.price),
                    'discount_price': float(product.discount_price) if product.discount_price else None,
                    'rating': float(product.rating) if product.rating else 0.0,
                    'reviews_count': product.reviews_count,
                    'product_url': product.product_url,
                    'image_url': product.image_url,
                    'quantity': product.quantity,
                    'is_available': product.is_available,
                    'platform': product.platform
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
            platform_name_display = self._get_platform_display_name()
            await self._save_search_history(update, context, query, products_for_sending, platform_name_display)
            
            if self.current_search_task and self.current_search_task.cancelled():
                raise asyncio.CancelledError()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
            await self.send_all_products(update, products_for_sending)
            
            await update.message.reply_text(
                "üéâ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:",
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )
            
        except asyncio.TimeoutError:
            try:
                await search_msg.edit_text(
                    "‚è∞ <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞</b>\n\n"
                    "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
            except Exception:
                await update.message.reply_text(
                    "‚è∞ <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞</b>",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
        except asyncio.CancelledError:
            raise
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: %s", str(e))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω
            if not (self.current_search_task and self.current_search_task.cancelled()):
                try:
                    await search_msg.edit_text(
                        f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:</b>\n{str(e)[:100]}...",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
                except Exception:
                    await update.message.reply_text(
                        f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:</b>\n{str(e)[:100]}...",
                        parse_mode="HTML",
                        reply_markup=self._get_main_keyboard()
                    )
            raise
    
    async def send_all_products(self, update: Update, products: List[dict]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not products:
            logger.warning("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
            await update.message.reply_text("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return
            
        total_count = len(products)
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É %s —Ç–æ–≤–∞—Ä–æ–≤", total_count)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await update.message.reply_text(
            f"üì¶ <b>–ù–∞–π–¥–µ–Ω–æ {total_count} —Ç–æ–≤–∞—Ä–æ–≤:</b>",
            parse_mode="HTML"
        )
        
        sent_count = 0
        for index, product in enumerate(products):
            try:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä %s/%s: %s", index+1, total_count, product.get('name'))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await self.send_product_card(update, product, index, total_count)
                sent_count += 1
                await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ %s: %s", index, str(e))
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %s –∏–∑ %s —Ç–æ–≤–∞—Ä–æ–≤", sent_count, total_count)
        if sent_count > 0:
            await update.message.reply_text(
                f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {total_count} —Ç–æ–≤–∞—Ä–æ–≤</b>",
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )
    
    async def check_db(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        from app.models import Product
        try:
            count = await asyncio.to_thread(lambda: Product.objects.count())
            products = await asyncio.to_thread(
                lambda: list(Product.objects.all().order_by('-id')[:5])
            )
            
            text = f"üìä <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{count}</b>\n"
            text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–æ–≤–∞—Ä–æ–≤:\n"
            
            for i, p in enumerate(products, 1):
                text += f"  {i}. {p.product_id} - {p.name}\n"
            
            await update.message.reply_text(text, parse_mode="HTML")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã: {str(e)}")

    async def _is_image_available(self, image_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if self.session is None:
                await self.init_session()
                
            async with self.session.head(image_url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                return response.status == 200
        except Exception as e:
            logger.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ {image_url}: {e}")
            return False
    
    def _is_button(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π"""
        buttons = [
            "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
            "üéØ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤", "üíé –ê–∫—Ü–∏–∏", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏", "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
            "5 —Ç–æ–≤–∞—Ä–æ–≤", "10 —Ç–æ–≤–∞—Ä–æ–≤", "15 —Ç–æ–≤–∞—Ä–æ–≤", "20 —Ç–æ–≤–∞—Ä–æ–≤", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
        ]
        return text in buttons
    
    async def send_product_card(self, update: Update, product: dict, 
                          current_index: int, total_count: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            caption = self._generate_caption(product, current_index, total_count)
            image_url = product.get('image_url')
            
            if image_url and not self._is_bad_url(image_url):
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
                try:
                    await update.message.reply_photo(
                        photo=image_url,
                        caption=caption,
                        parse_mode="HTML"
                    )
                    return
                except Exception as e:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: %s", str(e))
            
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(caption, parse_mode="HTML")
                
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: %s", str(e))
    
    def _is_bad_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ø–ª–æ—Ö–∏–º (placeholder –∏–ª–∏ –Ω–µ—Ä–∞–±–æ—á–∏–º)"""
        if not url:
            return True
        bad_patterns = [
            'via.placeholder.com',
            'placeholder',
            'no+image',
            'no_image',
            'example.com',
            'dummyimage.com',
            'broken',
            'error',
        ]
        return any(pattern in url.lower() for pattern in bad_patterns)

    async def send_product_with_image(self, update: Update, product: dict, 
                               current_index: int, total_count: int) -> None:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        try:
            image_url = product.get('image_url')
            caption = self._generate_caption(product, current_index, total_count)
            
            if image_url:
                await update.message.reply_photo(
                    photo=image_url,
                    caption=caption,
                    parse_mode="HTML"
                )
            else:
                await update.message.reply_text(caption, parse_mode="HTML")
                
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: %s", str(e))
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            caption = self._generate_caption(product, current_index, total_count)
            await update.message.reply_text(caption, parse_mode="HTML")

    async def _find_alternative_image(self, product_id: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not product_id:
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            image_urls = await asyncio.to_thread(
                self.current_parser._generate_all_image_urls, 
                int(product_id)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ URL
            for url in image_urls:
                if await self._is_image_available(url):
                    return url
                    
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    async def _try_direct_url_send(self, update: Update, image_url: str, caption: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL"""
        try:
            await update.message.reply_photo(
                photo=image_url,
                caption=caption,
                parse_mode="HTML"
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {image_url}")
            return True
        except Exception as e:
            logger.debug(f"–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False

    async def _try_download_and_send(self, update: Update, image_url: str, caption: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.session is None:
                await self.init_session()
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_data = await self._download_image(image_url)
            if not img_data:
                return False
                
            img_bytes, content_type = img_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = len(img_bytes.getvalue())
            if file_size > 10 * 1024 * 1024:  # 10MB limit
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {file_size} bytes")
                return False
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await update.message.reply_photo(
                photo=img_bytes,
                caption=caption,
                parse_mode="HTML"
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/–æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    async def _download_image(self, url: str) -> Optional[Tuple[BytesIO, str]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if self.session is None:
                await self.init_session()
                
            async with self.session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    content_type = response.headers.get('Content-Type', '')
                    if content_type.startswith('image/'):
                        image_data = await response.read()
                        img_bytes = BytesIO(image_data)
                        return img_bytes, content_type
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

    async def send_product_text_only(self, update: Update, product: dict, 
                                  current_index: int, total_count: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            text = self._generate_caption(product, current_index, total_count)
            await update.message.reply_text(text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {e}")

    def _generate_caption(self, product: dict, current_index: int, total_count: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = product.get('price', 0)
        discount_price = product.get('discount_price')
        rating = product.get('rating', 0)
        reviews = product.get('reviews_count', 0)
        product_url = product.get('product_url', '')
        product_id = product.get('product_id', 'N/A')
        quantity = product.get('quantity', 0)
        is_available = product.get('is_available', False)
        platform = product.get('platform', 'WB')
        
        # –ü–†–ê–í–ò–õ–¨–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if platform in ['wildberries', 'WB', 'Wildberries']:
            platform_emoji = "üõçÔ∏è"
            platform_name = "Wildberries"
            platform_hashtag = "#wildberries"
        else:  # Ozon
            platform_emoji = "üü†" 
            platform_name = "Ozon"
            platform_hashtag = "#ozon"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        price_str = f"<b>{price:,.0f} ‚ÇΩ</b>".replace(',', ' ')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç
        text = f"{platform_emoji} <b>{name}</b>\n\n"
        
        # –ë–ª–æ–∫ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
        text += f"üìã <b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{product_id}</code>\n"
        text += f"üè™ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_name} {platform_emoji}\n"
        
        # –ë–ª–æ–∫ —Å —Ü–µ–Ω–∞–º–∏
        if discount_price and discount_price < price:
            discount_percent = int((1 - discount_price / price) * 100)
            discount_price_str = f"<b>{discount_price:,.0f} ‚ÇΩ</b>".replace(',', ' ')
            original_price_str = f"<s>{price:,.0f} ‚ÇΩ</s>".replace(',', ' ')
            
            text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {discount_price_str}\n"
            text += f"üìâ <b>–ë—ã–ª–æ:</b> {original_price_str}\n"
            text += f"üéØ <b>–°–∫–∏–¥–∫–∞:</b> <b>-{discount_percent}%</b>\n"
        else:
            text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_str}\n"

        text += "\n"
        
        # –ë–ª–æ–∫ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –æ—Ç–∑—ã–≤–∞–º–∏
        if rating > 0:
            stars = "‚≠ê" * min(5, int(rating))
            text += f"{stars} <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating:.1f}/5.0\n"
        
        if reviews > 0:
            reviews_str = f"{reviews:,}".replace(',', ' ')
            text += f"üìù <b>–û—Ç–∑—ã–≤–æ–≤:</b> {reviews_str}\n"
        else:
            text += "üìù <b>–û—Ç–∑—ã–≤–æ–≤:</b> –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        # –ë–ª–æ–∫ —Å –Ω–∞–ª–∏—á–∏–µ–º
        if quantity is not None and quantity > 0:
            text += f"üì¶ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {quantity} —à—Ç.\n"
        elif is_available:
            text += "‚úÖ <b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n"
        else:
            text += "‚ùå <b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n"
        
        # –ë–ª–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å—Å—ã–ª–∫–æ–π
        text += f"üî¢ <b>–¢–æ–≤–∞—Ä {current_index + 1} –∏–∑ {total_count}</b>\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
        if product_url and product_url.startswith('http'):
            text += f"üîó <a href='{product_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É –Ω–∞ {platform_name}</a>\n\n"
        else:
            text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        hashtags = [platform_hashtag]
        if discount_price and discount_price < price:
            hashtags.append("#—Å–∫–∏–¥–∫–∞")
        
        text += " ".join(hashtags)
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(text) > 1024:
            important_parts = [
                f"{platform_emoji} <b>{name}</b>\n\n",
                f"üìã <b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{product_id}</code>\n",
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_str}\n",
                f"üì¶ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {quantity} —à—Ç.\n" if quantity and quantity > 0 else "‚úÖ <b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n",
                f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating:.1f}/5.0\n" if rating > 0 else "",
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
            if product_url and product_url.startswith('http'):
                important_parts.append(f"üîó <a href='{product_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É</a>")
            
            text = "".join(important_parts)
            
            if len(text) > 1024:
                text = text[:1020] + "..."
        
        return text

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        products = context.user_data.get('last_results', [])
        query = context.user_data.get('query', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
        
        if not products:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
                "üîç –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        prices = [p.get('price', 0) for p in products]
        discount_prices = [p.get('discount_price', 0) for p in products if p.get('discount_price')]
        ratings = [p.get('rating', 0) for p in products if p.get('rating', 0) > 0]
        
        avg_price = sum(prices) / len(prices) if prices else 0
        min_price = min(prices) if prices else 0
        max_price = max(prices) if prices else 0
        
        avg_rating = sum(ratings) / len(ratings) if ratings else 0
        
        discount_count = len(discount_prices)
        if discount_count > 0:
            avg_discount = sum((p.get('price', 0) - p.get('discount_price', 0)) / p.get('price', 1) * 100 
                          for p in products if p.get('discount_price')) / discount_count
        else:
            avg_discount = 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        avg_price_str = f"{avg_price:,.0f} ‚ÇΩ".replace(',', ' ')
        min_price_str = f"{min_price:,.0f} ‚ÇΩ".replace(',', ' ')
        max_price_str = f"{max_price:,.0f} ‚ÇΩ".replace(',', ' ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = (
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–ü–†–û–°–£:</b> <code>{query}</code>\n\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:</b> <b>{len(products)}</b>\n\n"
            f"üí∞ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> <b>{avg_price_str}</b>\n"
            f"üìâ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b> <b>{min_price_str}</b>\n"
            f"üìà <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b> <b>{max_price_str}</b>\n\n"
        )
        
        if discount_count > 0:
            text += (
                f"üéÅ <b>–¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π:</b> <b>{discount_count}</b>\n"
                f"üí∏ <b>–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞:</b> <b>{avg_discount:.1f}%</b>\n\n"
            )
        
        if ratings:
            text += f"‚≠ê <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> <b>{avg_rating:.1f}/5.0</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if avg_discount > 20:
            text += "\nüéØ <b>–û—Ç–ª–∏—á–Ω—ã–µ —Å–∫–∏–¥–∫–∏!</b>"
        elif avg_rating > 4.0:
            text += "\nüëç <b>–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>"
        elif min_price < 1000:
            text += "\nüí´ <b>–ï—Å—Ç—å –±—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</b>"
        
        await update.message.reply_text(
            text,
            parse_mode="HTML",
            reply_markup=self._get_main_keyboard()
        )

    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–∑ –ë–î"""
        user = context.user_data.get('db_user')
        if not user:
            try:
                user, created = await self.user_service.get_or_create_telegram_user(update)
                context.user_data['db_user'] = user
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
                return

        try:
            # –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–°–¢–û–†–ò–Æ –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
            user_stats = await self.user_service.get_user_stats(user.user_id)
            # –ò–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:
            from asgiref.sync import sync_to_async
            from app.models import UserSearchHistory
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_history_db = await sync_to_async(
                lambda: list(
                    UserSearchHistory.objects.filter(user=user).order_by('-created_at')[:10]
                )
            )()
            
            if not search_history_db:
                await update.message.reply_text(
                    "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞</b>\n\n"
                    "üîç –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤",
                    parse_mode="HTML",
                    reply_markup=self._get_main_keyboard()
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î
            text = "‚ú® <b>–ò–°–¢–û–†–ò–Ø –ü–û–ò–°–ö–ê (–∏–∑ –ë–î)</b>\n\n"
            for i, history_item in enumerate(search_history_db, 1):
                query = history_item.query
                timestamp = history_item.created_at.strftime("%d.%m.%Y –≤ %H:%M") # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –ë–î
                count = history_item.results_count
                platform_code = history_item.platform
                platform_name = "Wildberries üõçÔ∏è" if platform_code == 'WB' else "Ozon üü†"
                
                text += f"üîç <b>–ó–∞–ø—Ä–æ—Å {i}:</b> <code>{query}</code>\n"
                text += f"   üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{count}</b>\n"
                text += f"   üè™ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_name}\n"
                text += f"   üïí –í—Ä–µ–º—è: {timestamp}\n\n"
            
            text += "üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã</i>"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –ë–î
            keyboard = []
            for history_item in search_history_db[:5]:
                query = history_item.query
                display_query = query[:15] + "..." if len(query) > 18 else query
                keyboard.append([KeyboardButton(f"üîç {display_query}")])
            
            keyboard.append([KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")])
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")

    async def _save_search_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, 
                             products: list, platform_name: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
        
        if query in ["üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏", "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ context –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = context.user_data.get('db_user')
        if not user:
            try:
                user, created = await self.user_service.get_or_create_telegram_user(update)
                if not user:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
                context.user_data['db_user'] = user
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user –Ω–µ None
        if user is None:
            logger.error("–û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–µ–Ω None")
            return
        
        user_id = user.user_id
        results_count = len(products)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–º–µ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏
            platform_code = 'WB' if 'Wildberries' in platform_name else 'OZ'
            
            await self.user_service.save_search_history(
                user_id=user_id,
                query=query,
                platform=platform_code,
                results_count=results_count
            )
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}, –∑–∞–ø—Ä–æ—Å='{query}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –ë–î: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if 'search_history' not in context.user_data:
            context.user_data['search_history'] = []
        
        history = context.user_data['search_history']
        timestamp = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
        history = [item for item in history if not (
            item.get('query') == query and item.get('platform') == platform_name
        )]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        history.insert(0, {
            'query': query,
            'results_count': results_count,
            'products': products[:10], # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
            'timestamp': timestamp,
            'platform': platform_name
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['search_history'] = history[:10]

    async def platform_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        await self.switch_platform(update, context)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text(
            "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=self._get_main_keyboard()
        )
        context.user_data['in_search'] = False
        return ConversationHandler.END

    async def debug_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        products = context.user_data.get('last_results', [])
        
        if not products:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.")
            return
            
        product = products[0]
        product_id = product.get('product_id', '')
        image_url = product.get('image_url')
        
        if not image_url:
            await update.message.reply_text("‚ùå –ù–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
            
        await update.message.reply_text(f"üîç –¢–µ–∫—É—â–∏–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        is_available = await self._is_image_available(image_url)
        await update.message.reply_text(f"üì° –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' if is_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}")
        
        if not is_available:
            # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            alternative_urls = await asyncio.to_thread(
                self.current_parser._generate_all_image_urls, 
                int(product_id) if product_id.isdigit() else 0
            )
            
            await update.message.reply_text(f"üîç –í—Å–µ–≥–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL: {len(alternative_urls)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL
            found_working = False
            for i, alt_url in enumerate(alternative_urls[:5]):
                alt_available = await self._is_image_available(alt_url)
                status = "‚úÖ" if alt_available else "‚ùå"
                await update.message.reply_text(f"{status} –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ {i+1}: {alt_url}")
                
                if alt_available and not found_working:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        await update.message.reply_photo(
                            photo=alt_url,
                            caption="üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
                        )
                        found_working = True
                        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –ø—Ä–æ–¥—É–∫—Ç–µ
                        product['image_url'] = alt_url
                        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {e}")
            
            if not found_working:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if is_available:
                img_data = await self._download_image(image_url)
                if img_data:
                    img_bytes, content_type = img_data
                    file_size = len(img_bytes.getvalue())
                    await update.message.reply_text(
                        f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_size} –±–∞–π—Ç\n"
                        f"üìù Content-Type: {content_type}"
                    )
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏...")
                    
                    # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ URL
                    try:
                        await update.message.reply_photo(
                            photo=image_url,
                            caption="üì§ –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ URL"
                        )
                        await update.message.reply_text("‚úÖ –ú–µ—Ç–æ–¥ 1: –£—Å–ø–µ—à–Ω–æ!")
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –ú–µ—Ç–æ–¥ 1: –û—à–∏–±–∫–∞ - {e}")
                    
                    # –ú–µ—Ç–æ–¥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
                    try:
                        await update.message.reply_photo(
                            photo=img_bytes,
                            caption="üì• –ú–µ—Ç–æ–¥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞"
                        )
                        await update.message.reply_text("‚úÖ –ú–µ—Ç–æ–¥ 2: –£—Å–ø–µ—à–Ω–æ!")
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –ú–µ—Ç–æ–¥ 2: –û—à–∏–±–∫–∞ - {e}")
                        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è
        solution_text = (
            "üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n\n"
            "1. üïê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ - –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º\n"
            "2. üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "3. üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
            "4. ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞"
        )
        
        await update.message.reply_text(solution_text, parse_mode="HTML")
    
    async def debug_ozon(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Ozon"""
        test_queries = ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ—É—Ç–±—É–∫", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–∫–Ω–∏–≥–∞"]
        
        for query in test_queries:
            await update.message.reply_text(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Ozon –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            
            try:
                products = await asyncio.to_thread(self.parsers['OZ'].search_products, query, 3)
                
                if products:
                    await update.message.reply_text(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤\n"
                        f"–ü—Ä–∏–º–µ—Ä: {products[0].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
                    )
                else:
                    await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
            await asyncio.sleep(1)
    
    async def check_ozon_api(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ozon API"""
        try:
            test_url = "https://www.ozon.ru/api/entrypoint-api.bx/page/json/v2"
            payload = {
                "url": "/search/?text=—Ç–µ–ª–µ—Ñ–æ–Ω",
                "params": {"text": "—Ç–µ–ª–µ—Ñ–æ–Ω"}
            }
            
            response = requests.post(
                test_url,
                json=payload,
                headers={
                    'User-Agent': self.ua.random,
                    'Content-Type': 'application/json',
                    'Origin': 'https://www.ozon.ru',
                    'Referer': 'https://www.ozon.ru/'
                },
                timeout=10
            )
            
            if response.status_code == 200:
                await update.message.reply_text(
                    f"‚úÖ Ozon API –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    f"Status: {response.status_code}\n"
                    f"Response: {response.text[:200]}..."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå Ozon API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    f"Status: {response.status_code}\n"
                    f"Response: {response.text[:200]}..."
                )
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ozon API: {str(e)}")

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries'

    def handle(self, *args, **options):
        token = "8124289862:AAGPVxgf5gyphHU1SUwVfgozwbEL9a1NO24"
        
        bot = MultiPlatformBot(token)
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("help", bot.help))
        application.add_handler(CommandHandler("stats", bot.stats_command))
        application.add_handler(CommandHandler("history", bot.history_command))
        application.add_handler(CommandHandler("platform", bot.platform_command))
        application.add_handler(CommandHandler("debug", bot.debug_image))
        application.add_handler(CommandHandler("top", bot.top_products))
        application.add_handler(CommandHandler("debug_image", bot.debug_image))
        application.add_handler(CommandHandler("checkdb", bot.check_db))
        application.add_handler(MessageHandler(filters.Document.ALL, bot.handle_media))
        application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, bot.handle_media))
        application.add_handler(MessageHandler(filters.LOCATION | filters.POLL, bot.handle_media))
     
         # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("search", bot.search_command),
                MessageHandler(filters.Regex("^üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤$"), bot.search_command)
            ],
            states={
                SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_query)],
                SEARCH_LIMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.receive_limit)],
            },
            fallbacks=[
                CommandHandler("cancel", bot.cancel),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫$"), bot.cancel_search),
            ],
        )
        application.add_handler(conv_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
        
        self.stdout.write(self.style.SUCCESS('–ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...'))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–π–Ω–æ–µ loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            loop.run_until_complete(bot.init_session())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            bot_task = loop.create_task(application.run_polling())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            loop.run_until_complete(bot_task)
            
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}'))
        finally:
            try:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
                if not loop.is_closed():
                    close_task = loop.create_task(bot.close_session())
                    loop.run_until_complete(asyncio.wait_for(close_task, timeout=5.0))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}'))
            finally:
                # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
                try:
                    if not loop.is_closed():
                        loop.close()
                except:
                    pass