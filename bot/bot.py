import logging
from typing import Dict, List
from functools import lru_cache
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    CallbackContext,
)

from project.app.parser import WildberriesParser  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="wb_bot.log",
)
logger = logging.getLogger(__name__)

class WBBot:
    def __init__(self, token: str):
        self.token = token
        self.parser = WildberriesParser()
        self.user_searches: Dict[int, List[Dict]] = {}  # –ö—ç—à –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
        
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("help", self.help),
            CommandHandler("search", self.search_command),
            CommandHandler("stats", self.show_stats),
            CommandHandler("history", self.show_history),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text),
            CallbackQueryHandler(self.button_callback),
        ]
        
        for handler in handlers:
            self.application.add_handler(handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>–∫—Ä–æ—Å—Å–æ–≤–∫–∏ Nike</code>\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search <i>–∑–∞–ø—Ä–æ—Å</i>\n\n"
            "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help"
        )
        await update.message.reply_text(text, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.save_user(update.effective_user)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        text = (
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
            "- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
            "- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /search <i>–∑–∞–ø—Ä–æ—Å</i>\n\n"
            "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>—Ç–µ–ª–µ—Ñ–æ–Ω 5</code> - –Ω–∞–π–¥–µ—Ç 5 —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "–ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
            "üïí <b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
            "/history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤"
        )
        await update.message.reply_text(text, parse_mode="HTML")
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        query = " ".join(context.args)
        if not query:
            await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: /search iPhone 13")
            return
        
        await self.process_search(update, query, context)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.message.text.strip()
        await self.process_search(update, query, context)
    
    async def process_search(self, update: Update, query: str, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await update.message.reply_chat_action("typing")
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            query_parts = query.split()
            limit = 10
            
            if len(query_parts) > 1 and query_parts[-1].isdigit():
                limit = min(int(query_parts[-1]), 20)
                query = " ".join(query_parts[:-1])
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            products = self.search_with_cache(query, limit)
            
            if not products:
                await update.message.reply_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.save_search(update.effective_user.id, query, products)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ context –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            context.user_data['last_search'] = products
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
            await self.send_product(update, products, 0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @lru_cache(maxsize=100)
    def search_with_cache(self, query: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        return self.parser.search_products(query, limit)
    
    async def send_product(self, update: Update, products: List[Dict], index: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        product = products[index]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = self.format_product_info(product, index, len(products))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = self.create_product_keyboard(index, len(products), product['product_url'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if product.get('image_url'):
                await update.message.reply_photo(
                    photo=product['image_url'],
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
                return
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
        
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            text,
            parse_mode="HTML",
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    
    def format_product_info(self, product: Dict, index: int, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        price_info = f"üí∞ <b>{product['price']} ‚ÇΩ</b>"
        if product.get('discount_price'):
            price_info += f" (‚¨áÔ∏è <b>{product['discount_price']} ‚ÇΩ</b>)"
        
        return (
            f"üõçÔ∏è <b>{product['name']}</b>\n\n"
            f"{price_info}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']} ({product['reviews_count']} –æ—Ç–∑—ã–≤–æ–≤)\n"
            f"üîó <a href='{product['product_url']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ Wildberries</a>\n\n"
            f"üìå –¢–æ–≤–∞—Ä {index + 1} –∏–∑ {total}"
        )
    
    def create_product_keyboard(self, index: int, total: int, product_url: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if index > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{index}"))
        
        buttons.append(InlineKeyboardButton(f"{index + 1}/{total}", callback_data="info"))
        
        if index < total - 1:
            buttons.append(InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data=f"next_{index}"))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        other_buttons = [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üõí –ù–∞ WB", url=product_url),
        ]
        
        return InlineKeyboardMarkup([buttons, other_buttons])
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "stats":
            await self.show_stats_callback(query, context)
        elif data.startswith(("prev_", "next_")):
            await self.handle_navigation(query, data)
    
    async def handle_navigation(self, query, data: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
        current_index = int(data.split("_")[1])
        new_index = current_index - 1 if data.startswith("prev_") else current_index + 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        products = self.get_products_from_message(query.message)
        
        if products and 0 <= new_index < len(products):
            await self.edit_product_message(query, products, new_index)
    
    async def edit_product_message(self, query, products: List[Dict], index: int):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ"""
        product = products[index]
        text = self.format_product_info(product, index, len(products))
        reply_markup = self.create_product_keyboard(index, len(products), product['product_url'])
        
        try:
            if query.message.photo:
                await query.message.edit_media(
                    InputMediaPhoto(
                        media=product.get('image_url', ''),
                        caption=text,
                        parse_mode="HTML"
                    ),
                    reply_markup=reply_markup
                )
            else:
                await query.message.edit_text(
                    text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                    disable_web_page_preview=True
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def get_products_from_message(self, message) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ context.user_data
        return []
    
    async def show_stats_callback(self, query, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ callback"""
        if 'last_search' not in context.user_data:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
            return
        
        products = context.user_data['last_search']
        stats = self.parser.calculate_price_statistics(products)
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n"
            f"üî¢ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(products)}\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']} ‚ÇΩ\n"
            f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {stats['min_price']} ‚ÇΩ\n"
            f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {stats['max_price']} ‚ÇΩ\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {stats['average_discount']}%\n"
            f"üè∑Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: {stats['discount_products_count']}"
        )
        
        await query.message.reply_text(text, parse_mode="HTML")
    
    async def show_stats(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if 'last_search' not in context.user_data:
            await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤.")
            return
        
        products = context.user_data['last_search']
        stats = self.parser.calculate_price_statistics(products)
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n"
            f"üî¢ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(products)}\n"
            f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['average_price']} ‚ÇΩ\n"
            f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {stats['min_price']} ‚ÇΩ\n"
            f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {stats['max_price']} ‚ÇΩ\n"
            f"üéØ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {stats['average_discount']}%\n"
            f"üè∑Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: {stats['discount_products_count']}"
        )
        
        await update.message.reply_text(text, parse_mode="HTML")
    
    async def show_history(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        searches = self.user_searches.get(user_id, [])[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        
        if not searches:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –ø–æ–∏—Å–∫.")
            return
        
        text = "üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
        text += "\n".join(
            f"{i+1}. {s['query']} ({len(s['products'])} —Ç–æ–≤–∞—Ä–æ–≤)"
            for i, s in enumerate(reversed(searches))
        )
        
        await update.message.reply_text(text, parse_mode="HTML")
    
    def save_user(self, user):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —Å–ª–µ–¥—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        pass
    
    def save_search(self, user_id: int, query: str, products: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        if user_id not in self.user_searches:
            self.user_searches[user_id] = []
        
        self.user_searches[user_id].append({
            "timestamp": datetime.now().timestamp(),
            "query": query,
            "products": products,
        })
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", exc_info=context.error)
        
        if update.effective_message:
            await update.effective_message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

