# management/commands/user_stats.py
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db import models
from django.db.models import Count, Avg, Sum, Max
from app.models import TelegramUser, UserSearchHistory

class Command(BaseCommand):
    help = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--detailed',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
        )
    
    def handle(self, *args, **options):
        detailed = options['detailed']
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = TelegramUser.objects.count()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        active_users = TelegramUser.objects.filter(
            last_activity__gte=timezone.now() - timezone.timedelta(days=7)
        ).count()
        
        # –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        very_active_users = TelegramUser.objects.filter(
            last_activity__gte=timezone.now() - timezone.timedelta(hours=24)
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤
        search_stats = TelegramUser.objects.aggregate(
            total_searches=Sum('search_count'),
            avg_searches=Avg('search_count'),
            max_searches=Max('search_count'),
            users_with_searches=Count('id', filter=models.Q(search_count__gt=0))
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        premium_stats = TelegramUser.objects.filter(is_premium=True).aggregate(
            count=Count('id'),
            avg_searches=Avg('search_count')
        )
        
        # –í—ã–≤–æ–¥ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stdout.write(
            self.style.SUCCESS(
                "üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}\n"
                f"‚Ä¢ ‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {very_active_users}\n"
                f"‚Ä¢ üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {search_stats['total_searches'] or 0}\n"
                f"‚Ä¢ üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–∞–º–∏: {search_stats['users_with_searches']}\n"
                f"‚Ä¢ üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤: {search_stats['avg_searches'] or 0:.1f}\n"
                f"‚Ä¢ üèÜ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∏—Å–∫–æ–≤: {search_stats['max_searches'] or 0}\n"
            )
        )
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if detailed:
            self.stdout.write(
                self.style.WARNING(
                    "\nüìà –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
            )
            
            # –¢–æ–ø 10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            top_users = TelegramUser.objects.order_by('-search_count')[:10]
            
            self.stdout.write("üèÜ –¢–û–ü-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, user in enumerate(top_users, 1):
                self.stdout.write(
                    f"  {i}. {user.first_name} ({user.user_id}): "
                    f"{user.search_count} –ø–æ–∏—Å–∫–æ–≤, "
                    f"–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y')}"
                )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            from django.db.models.functions import TruncDay
            daily_stats = UserSearchHistory.objects.annotate(
                day=TruncDay('created_at')
            ).values('day').annotate(
                searches=Count('id'),
                users=Count('user', distinct=True)
            ).order_by('-day')[:7]
            
            self.stdout.write("\nüìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 7 –î–ù–ï–ô:")
            for stat in daily_stats:
                self.stdout.write(
                    f"  {stat['day'].strftime('%d.%m.%Y')}: "
                    f"{stat['searches']} –ø–æ–∏—Å–∫–æ–≤, {stat['users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )