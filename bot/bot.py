import sys
import os
from pathlib import Path
import django

# 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
BASE_DIR = Path(__file__).resolve().parent.parent.parent  # Wildberries_parser/
sys.path.append(str(BASE_DIR))

# 2. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.project.settings')
try:
    django.setup()
except Exception as e:
    print(f"Django setup error: {e}")
    # –ï—Å–ª–∏ Django –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ
    class Product: pass
    class ProductImage: pass
else:
    from backend.app.models import Product, ProductImage

# 3. –ò–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–∞
try:
    from backend.app.parser import WildberriesParser
except ImportError:
    from parser import WildberriesParser
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from io import BytesIO
from PIL import Image


BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="8124289862:AAGPVxgf5gyphHU1SUwVfgozwbEL9a1NO24")
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
parser = WildberriesParser()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()
    waiting_for_category = State()
    waiting_for_limit = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏, "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞.\n\n"
        "‚ÑπÔ∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞"
    )
    await message.answer(welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–æ—Å—Å–æ–≤–∫–∏')\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–∏—Å–∫—É\n\n"
        "üîÑ –ò—Å—Ç–æ—Ä–∏—è: /history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
    )
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /search - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
@dp.message(F.text == '/search')
async def cmd_search(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_query)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–æ—Å—Å–æ–≤–∫–∏'):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫)
@dp.message_handler(state="*")
async def quick_search(message: types.Message):
    query = message.text.strip()
    if len(query) < 2:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await SearchStates.waiting_for_category.set()
    await message.answer(f"üîç –í—ã –∏—â–µ—Ç–µ: <b>{query}</b>\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", parse_mode="HTML")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    async with dp.current_state(chat=message.chat.id).proxy() as data:
        data['query'] = query

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=SearchStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    category = message.text.strip()
    
    async with state.proxy() as data:
        data['category'] = category if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    await SearchStates.next()
    await message.answer("üìä –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Ç 1 –¥–æ 20):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(state=SearchStates.waiting_for_limit)
async def process_limit(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text.strip())
        if limit < 1 or limit > 20:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        return
    
    async with state.proxy() as data:
        query = data['query']
        category = data['category']
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    msg = await message.answer(f"üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{query}</b>...", parse_mode="HTML")
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        products = await parser.parse_products_async(query, category, limit)
        
        if not products:
            await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        async with state.proxy() as data:
            data['last_results'] = products
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await send_product(message.chat.id, products[0], 0, len(products))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
async def send_product(chat_id, product, current_index, total_count):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üõç <b>{product['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{product['price']:.2f} ‚ÇΩ</b>\n"
    )
    
    if product.get('discount_price'):
        text += f"üí∏ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{product['discount_price']:.2f} ‚ÇΩ</b>\n"
        discount_percent = ((product['price'] - product['discount_price']) / product['price'] * 100)
        text += f"üéÅ –°–∫–∏–¥–∫–∞: <b>{discount_percent:.0f}%</b>\n"
    
    if product.get('wildberries_card_price'):
        text += f"üí≥ –° –∫–∞—Ä—Ç–æ–π WB: <b>{product['wildberries_card_price']:.2f} ‚ÇΩ</b>\n"
    
    text += (
        f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{product['rating']:.1f}</b>\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤: <b>{product['reviews_count']}</b>\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product['category']}</b>\n\n"
        f"–¢–æ–≤–∞—Ä {current_index + 1} –∏–∑ {total_count}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    kb = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if current_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{current_index - 1}"))
    
    buttons.append(InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ WB", url=product['product_url']))
    
    if current_index < total_count - 1:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"next_{current_index + 1}"))
    
    kb.add(*buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    kb.row(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{current_index}")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if product.get('image_url'):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_data = parser._download_image(product['image_url'])
            if img_data:
                img_bytes, img_type = img_data
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=img_bytes,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=kb
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode="HTML",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º)
@dp.callback_query_handler(lambda c: c.data.startswith(('prev_', 'next_')))
async def process_callback_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    action, index = callback_query.data.split('_')
    index = int(index)
    
    async with state.proxy() as data:
        products = data['last_results']
    
    if 0 <= index < len(products):
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        await send_product(callback_query.message.chat.id, products[index], index, len(products))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query_handler(lambda c: c.data == 'stats')
async def process_callback_stats(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    async with state.proxy() as data:
        products = data.get('last_results', [])
    
    if not products:
        await bot.send_message(callback_query.message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    prices = [p['price'] for p in products]
    discount_prices = [p['discount_price'] for p in products if p.get('discount_price')]
    ratings = [p['rating'] for p in products]
    
    avg_price = sum(prices) / len(prices) if prices else 0
    min_price = min(prices) if prices else 0
    max_price = max(prices) if prices else 0
    
    avg_rating = sum(ratings) / len(ratings) if ratings else 0
    
    if discount_prices:
        avg_discount = sum((p['price'] - p['discount_price']) / p['price'] * 100 
                          for p in products if p.get('discount_price')) / len(discount_prices)
    else:
        avg_discount = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞:</b>\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: <b>{len(products)}</b>\n\n"
        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_price:.2f} ‚ÇΩ</b>\n"
        f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{min_price:.2f} ‚ÇΩ</b>\n"
        f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{max_price:.2f} ‚ÇΩ</b>\n\n"
    )
    
    if discount_prices:
        text += (
            f"üéÅ –¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{len(discount_prices)}</b>\n"
            f"üí∏ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: <b>{avg_discount:.1f}%</b>\n\n"
        )
    
    text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_rating:.1f}/5</b>"
    
    await bot.send_message(callback_query.message.chat.id, text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data.startswith('save_'))
async def process_callback_save(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    _, index = callback_query.data.split('_')
    index = int(index)
    
    async with state.proxy() as data:
        products = data.get('last_results', [])
        query = data.get('query', '')
    
    if 0 <= index < len(products):
        product = products[index]
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚úÖ –¢–æ–≤–∞—Ä <b>{product['name']}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
            f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: <b>{query}</b>",
            parse_mode="HTML"
        )

# –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–∏—Å–∫—É
@dp.message_handler(commands=['stats'])
async def cmd_stats(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        products = data.get('last_results', [])
    
    if not products:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É callback)
    prices = [p['price'] for p in products]
    discount_prices = [p['discount_price'] for p in products if p.get('discount_price')]
    ratings = [p['rating'] for p in products]
    
    avg_price = sum(prices) / len(prices) if prices else 0
    min_price = min(prices) if prices else 0
    max_price = max(prices) if prices else 0
    
    avg_rating = sum(ratings) / len(ratings) if ratings else 0
    
    if discount_prices:
        avg_discount = sum((p['price'] - p['discount_price']) / p['price'] * 100 
                      for p in products if p.get('discount_price')) / len(discount_prices)
    else:
        avg_discount = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–∏—Å–∫—É:</b>\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: <b>{len(products)}</b>\n\n"
        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_price:.2f} ‚ÇΩ</b>\n"
        f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{min_price:.2f} ‚ÇΩ</b>\n"
        f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{max_price:.2f} ‚ÇΩ</b>\n\n"
    )
    
    if discount_prices:
        text += (
            f"üéÅ –¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{len(discount_prices)}</b>\n"
            f"üí∏ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: <b>{avg_discount:.1f}%</b>\n\n"
        )
    
    text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_rating:.1f}/5</b>"
    
    await message.answer(text, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
@dp.message_handler(commands=['history'])
async def cmd_history(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        query = data.get('query', '')
        category = data.get('category', '')
    
    if not query:
        await message.answer("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")
        return
    
    text = (
        "üïí <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
        f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: <b>{query}</b>\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>"
    )
    
    await message.answer(text, parse_mode="HTML")

if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)